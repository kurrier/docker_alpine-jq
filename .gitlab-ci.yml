--- 
stages:
  - check
  - build
  - test
  - release
  - cleanup

variables:
  DOCKER_DRIVER: overlay
  GIT_SSL_NO_VERIFY: "true"
  TEST_IMAGE: $registry/$organization/$CI_PROJECT_NAME:$CI_COMMIT_TAG-$CI_PIPELINE_ID
  RELEASE_IMAGE: $registry/$organization/$CI_PROJECT_NAME

  BUILD_TAG: ${CI_COMMIT_TAG}
  CONTAINER_NAME: ${CI_PROJECT_NAME}-${CI_JOB_ID}

before_script:
  - docker login -u $docker_user -p $docker_password $registry

syntax_check:
  stage: check
  script:
    - docker run -t --rm -v `pwd`:/root/ projectatomic/dockerfile-lint dockerfile_lint [-f Dockerfile]
    - >
    - docker run -t --rm -v `pwd`:/root/ projectatomic/dockerfile-lint dockerfile_lint [-f Dockerfile] |
      grep 'Error' &> /dev/null
      && (echo 'Idempotence test - fail' && exit 1)
      || (echo 'Idempotence test - pass' && exit 0)
  tags:
    - docker-ucp

1-build_docker_image:
  stage: build
  script:
    - docker build --build-arg JQ_VERSION=${BUILD_TAG} --build-arg GIT_COMMIT=${CI_COMMIT_SHA} --pull -t $TEST_IMAGE .
    - docker push $TEST_IMAGE
  tags:
    - docker
  only:
    - tags

2-analyze_docker_image:
  stage: build
  image: anchore/engine-cli:latest
  variables:
    ANCHORE_CLI_URL: "http://slxdockerbuild01:8160/v1"
    ANCHORE_CLI_USER: "admin"
    ANCHORE_CLI_PASS: "testpass123"
    ANCHORE_CLI_SSL_VERIFY: "false"
    ANCHORE_RETRIES: 12
    ANCHORE_FAIL_ON_POLICY: "false"
  before_script:
    - echo "Scanning Image"
  script:
    - echo "Adding image to Anchore engine at ${ANCHORE_CLI_URL}"
    - anchore-cli image add $TEST_IMAGE
    - echo "Waiting for analysis to complete"
    - counter=0
    - while (! (anchore-cli image get $TEST_IMAGE | grep Status\:\ analyzed) > /dev/null) ; do echo -n "." ; sleep 10 ; if [ $counter -eq ${ANCHORE_RETRIES} ] ; then echo " Timeout waiting for analysis" ; exit 1 ; fi ; counter=$(($counter+1)) ; done
    - echo "Analysis complete"
    - echo "Producing reports"
    - anchore-cli --json image content $TEST_IMAGE os > image-packages.json
    - anchore-cli --json image content $TEST_IMAGE npm > image-npm.json
    - anchore-cli --json image content $TEST_IMAGE gem > image-gem.json
    - anchore-cli --json image content $TEST_IMAGE python > image-python.json
    - anchore-cli --json image content $TEST_IMAGE java > image-java.json
    - anchore-cli --json image vuln $TEST_IMAGE os > image-vulnerabilities.json
    - anchore-cli --json image get $TEST_IMAGE > image-details.json
    - anchore-cli --json evaluate check $TEST_IMAGE --detail > image-policy.json || true
    - if [ "${ANCHORE_FAIL_ON_POLICY}" == "true" ] ; then anchore-cli evaluate check $TEST_IMAGE  ; fi 
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
    - image-policy.json
    - image-details.json
    - image-vulnerabilities.json
    - image-java.json
    - image-python.json
    - image-gem.json
    - image-npm.json
    - image-packages.json
    when: always
  tags:
    - docker
  only:
    - tags  

release_docker_image:
  stage: release
  script:
    - export VERSION=${BUILD_TAG}
    - docker tag $TEST_IMAGE $RELEASE_IMAGE:${VERSION}
    - docker tag $TEST_IMAGE $RELEASE_IMAGE:latest
    - docker push $RELEASE_IMAGE:${VERSION}
    - docker push $RELEASE_IMAGE:latest
    - docker image rm -f $RELEASE_IMAGE:${VERSION}
  tags:
    - docker
  only:
    - tags
  when: on_success
  
cleanup_docker_build:
  stage: cleanup
  script:
    - docker image rm -f $TEST_IMAGE:$BUILD_TAG
  tags:
    - docker
  only:
    - tags
  when: always 
  allow_failure: true

