--- 
stages:
  - check
  - build
  - test
  - deploy
  - release
  - cleanup

variables:
  DOCKER_DRIVER: overlay
  GIT_SSL_NO_VERIFY: "true"
  TEST_IMAGE: $registry/$organization/$CI_PROJECT_NAME
  RELEASE_IMAGE: $registry/$organization/$CI_PROJECT_NAME

  BUILD_TAG: ${CI_COMMIT_TAG}
  CONTAINER_NAME: ${CI_PROJECT_NAME}-${CI_JOB_ID}

before_script:
  - docker login -u $docker_user -p $docker_password $registry

syntax_check:
  stage: check
  script:
    - docker run -t --rm -v `pwd`:/root/ projectatomic/dockerfile-lint dockerfile_lint [-f Dockerfile]
    - >
    - docker run -t --rm -v `pwd`:/root/ projectatomic/dockerfile-lint dockerfile_lint [-f Dockerfile] |
      grep 'Error' &> /dev/null
      && (echo 'Idempotence test - fail' && exit 1)
      || (echo 'Idempotence test - pass' && exit 0)
  tags:
    - docker-ucp

1-build_docker_image:
  stage: build
  script:
    - docker pull $registry/$organization/$CI_PROJECT_NAME
    - docker build --build-arg JQ_VERSION=${BUILD_TAG} --build-arg GIT_COMMIT=${CI_COMMIT_SHA} --pull -t $TEST_IMAGE:$BUILD_TAG .
  tags:
    - docker
  only:
    - tags

2-analyze_docker_image:
  stage: build
  image: anchore/engine-cli:latest
  variables:
    ANCHORE_CLI_URL: "http://slxdockerbuild01:8160/v1"
    ANCHORE_CLI_USER: "admin"
    ANCHORE_CLI_PASS: "testpass123"
    ANCHORE_CLI_SSL_VERIFY: "false"
    ANCHORE_RETRIES: 12
    ANCHORE_FAIL_ON_POLICY: "true"
  script: image_scanning
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
    - image-policy.json
    - image-details.json
    - image-vulnerabilities.json
    - image-java.json
    - image-python.json
    - image-gem.json
    - image-npm.json
    - image-packages.json
  tags:
    - docker
  only:
    - tags  

#test_docker_image:
#  stage: test
#  image: $TEST_IMAGE:$BUILD_TAG
#  script:
#    - >
#      curl -k -X GET https://gitlab.lifecare.com/api/v4/version | jq .message
#      && (echo 'Idempotence test: pass' && exit 0)
#      || (echo 'Idempotence test: fail' && exit 1)
#    - >
#    - docker rm -f ${CONTAINER_NAME}
#  tags:
#    - docker
#  only:
#    - tags
#  when: on_success

deploy_docker_image:
  stage: deploy
  script:
    - docker push $TEST_IMAGE:$BUILD_TAG
  tags:
    - docker
  only:
    - tags
  when: on_success

release_docker_image:
  stage: release
  script:
    - export VERSION=${BUILD_TAG}
    - docker tag $TEST_IMAGE:$BUILD_TAG $RELEASE_IMAGE:${VERSION}
    - docker push $RELEASE_IMAGE:${VERSION}
    - docker tag $RELEASE_IMAGE:${VERSION} $RELEASE_IMAGE:latest
    - docker image rm -f $RELEASE_IMAGE:${VERSION}
    - docker push $RELEASE_IMAGE:latest
  tags:
    - docker
  only:
    - tags
  when: on_success
  
cleanup_docker_build:
  stage: cleanup
  script:
    - docker image rm -f $TEST_IMAGE:$BUILD_TAG
  tags:
    - docker
  only:
    - tags
  when: always 
  allow_failure: true

# ---------------------------------------------------------------------------

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
 
  function image_scanning() {
    echo "Adding image to Anchore engine at ${ANCHORE_CLI_URL}"
    anchore-cli image add ${TEST_IMAGE}
    echo "Waiting for analysis to complete"
    counter=0
    while (! (anchore-cli image get ${ANCHORE_SCAN_IMAGE} | grep Status\:\ analyzed) > /dev/null) ;
      do echo -n "." ; sleep 10 ; 
        if [ $counter -eq ${ANCHORE_RETRIES} ] ; 
          then echo " Timeout waiting for analysis" ; 
          exit 1 ; 
        fi ; 
      counter=$(($counter+1)) ; 
    done
    echo "Analysis complete"
    echo "Producing reports"
    anchore-cli --json image content ${ANCHORE_SCAN_IMAGE} os > image-packages.json
    anchore-cli --json image content ${ANCHORE_SCAN_IMAGE} npm > image-npm.json
    anchore-cli --json image content ${ANCHORE_SCAN_IMAGE} gem > image-gem.json
    anchore-cli --json image content ${ANCHORE_SCAN_IMAGE} python > image-python.json
    anchore-cli --json image content ${ANCHORE_SCAN_IMAGE} java > image-java.json
    anchore-cli --json image vuln ${ANCHORE_SCAN_IMAGE} os > image-vulnerabilities.json
    anchore-cli --json image get ${ANCHORE_SCAN_IMAGE} > image-details.json
    anchore-cli --json evaluate check ${ANCHORE_SCAN_IMAGE} --detail > image-policy.json || true
    if [ "${ANCHORE_FAIL_ON_POLICY}" == "true" ] ; 
      then anchore-cli evaluate check ${ANCHORE_SCAN_IMAGE}  ; 
    fi
  }
